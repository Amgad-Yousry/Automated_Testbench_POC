/*!
    @page lpi2c_master_s32k144_group LPI2C MASTER
    @brief Driver example that will show the LPI2C Master functionality

    ## Application description ##
    ______
    The purpose of this demo application is to show you the usage of the LPI2C module available on the S32K144 MCU
    as a \b master using S32 SDK.

    - The application uses S32 SDK API to initialize the LPI2C module as a master node and in Fast operation speed after configuring the clocks and pins needed to use the I2C.
    The example sends to requests to a slave, found at the configured address, the first being a TX request, while the other being a RX request.

    ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 S32K144 board
    - 3 Dupont cables (male to male or female to female depending on the boards)
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K144EVB-Q100
    - S32K144-MB

    ## Hardware Wiring ##
    ______

    The following connections must be done to for this example application to work:

    PIN FUNCTION	|	S32K144EVB-Q100 |	S32K144-MB
    ----------------|---------------|--------------
    LPI2C SCL (\b PTA3)	|J1-3 - Slave SCL      |J9-30 - Slave SCL
    LPI2C SDA (\b PTA2)	|J1-1 - Slave SDA    |J9-29 - Slave SDA
    GND	      (\b GND)  |J3-11 - Slave GND    |J6 - Slave GND

    ## How to run ##
    ______

    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b lpi2c_master_s32k144. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b lpi2c_master_s32k144). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b lpi2c_master_s32k144 \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b lpi2c_master_s32k144 \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b lpi2c_master_s32k144 \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b lpi2c_master_s32k144 \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.


*/

