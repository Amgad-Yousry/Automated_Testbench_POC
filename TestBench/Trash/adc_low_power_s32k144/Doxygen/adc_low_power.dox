
/*!
    @page adc_low_power_s32k144_group ADC Low Power
    @brief Demonstrates ADC trigger scheme using TRGMUX and LPIT, switches the power mode to stop and sends data using LPUART and DMA

    ## Application description ##
    ______
    The purpose of this demo application is to show you the usage of a subset of the peripherals found
    on the S32K144 SoC.

    - The application uses LPIT to trigger ADC conversions every 100ms via TRGMUX with the CPU in sleep
    mode. The ADC is using Hardware Compare feature to validate an conversion only if the value is
    greater than half of the reference voltage, in this case \b VDD/2. This way the CPU is woken up from
    sleep mode only if the condition is met.

    - When the conversion is complete the data is transformed into a bar graph and it is sent via LPUART
    using DMA memory to peripheral transfer to the host PC. This way, the CPU can be put into a low
    power mode to reduce the energy used.

    ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 S32K144 board
    - 1 Power Adapter 12V
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K144EVB-Q100
    - S32K144-MB

    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:

    PIN FUNCTION    |	S32K144EVB-Q100	        |	S32K144-MB
    ----------------|---------------|--------------
    LPUART1 TX (\b PTC7)	    | UART_TX - wired on the board 	|	J11.26 - J20.2
    LPUART1 RX (\b PTC6)   | UART_RX - wired on the board  |	J11.25 - J20.5
    ADC0 Input 12 (\b PTC14)       | POT - wired on the board         |   J21.1 - J11.18

    ## How to run ##
    ______
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b adc_low_power_s32k144. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b adc_low_power_s32k144). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b adc_low_power_s32k144 \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b adc_low_power_s32k144 \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b adc_low_power_s32k144 \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b adc_low_power_s32k144 \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

    ## Notes ##
    ______

    For this example it is necessary to open a terminal emulator and configure it with:
        -   115200 baud
        -   One stop bit
        -   No parity
        -   No flow control
*/

