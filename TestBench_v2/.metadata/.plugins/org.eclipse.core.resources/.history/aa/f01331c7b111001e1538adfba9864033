
/*
 * This program reads an ADC channel that is connected to the current signal of the power supply,
 * and convert it to the actual current measurement.
 * The ADC readings are (pre) triggered using the PDB (Programmable Delay Block).
 */

/* MODULE main */

/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "pin_mux.h"
#include "adConv1.h"
#include "lpTmr1.h"
#include "lpuart_gasboard.h"
#include "dmaController1.h"
#include "pdly1.h"
#include "pwrMan1.h"
#include "clockMan1.h"
#include "freemaster.h"
#include "lpi2c1.h"
#include "lpuart_gasboard.h"
#include "LPSPI_MPR.h"


#include "Definition.h"
#include "Init.h"
#include "Computations.h"

volatile int exit_code = 0;
/* User includes (#include below this line is not maintained by Processor Expert) */


#include <string.h>
#include <stdint.h>
#include <stdbool.h>



/* -----------------------  ADC  -----------------------  */

/* Variable to store the raw value from ADC conversion. Global to be modified inside the interrupt */
volatile uint16_t gu16CurrentRawValue;

/* Variable to store the converted current value */
volatile float gfCurrentValue;

/* Variable to store the current RMS value */
volatile float gfRMSCurrent;


/* Variable to count the number of conversions done and included on the RMS calculation */
volatile uint16_t gu16NrConvDone = 0U;

/* Variable to count and index the RMS calculation that is used to verify the
 * reliability of the data in FreeMaster */
uint16_t gu16RMSIdx = 0U;

/* Number total of conversions used to compute one RMS value. Global to allow the change in FreeMaster */
uint16_t gu16RMSBuffer = RMS_BUFFER_SIZE;

/* Flag used to store if an ADC IRQ was executed */
volatile bool gbADCConvDone = false;

/* Flag used to toggle the pin when the program enters the ADC interrupt routine */
volatile bool gbCocoFlag = false;

/* Flag used to toggle the pin when the program finishes the RMS calculation */
volatile bool gbRMSCoCo = false;



/* -----------------------  HDI  -----------------------  */

/* Pressure measured by the HDIB002AUY8P5 sensor through I2C communication in milibars.*/
uint16_t gu16PressureHDI;

/* Declaration of the LPI2C transfer buffer */
uint8_t  u8I2CBufferHDI[I2C_BUFFER_SIZE];

/* Flag used to store if an I2C ISR was executed*/
volatile bool gbI2CDone = false;


/* ---------------------  Gasboard  ---------------------  */

/* Values measured by the Gasboard 7500H sensor through UART communication. */

/* O2 Concentration in % */
float gfO2concentration;

/* O2 Flow in Liters per minute */
float gfO2flow;

/* O2 Temperature in Celsius */
float gfO2temperature;

/* Declare buffer used to store the received data */
uint8_t	GAS_RX_buffer[GAS_RX_BUFFER_SIZE];

/* Read O2 concentrations on the extended mode (extended mode = 0% to 100%, default mode = 20.5% to 95.6% ) */
//uint8_t	 TX_buffer[TX_BUFFER_SIZE] = {0x11, 0x01, 0x01, 0xED};
// Obs: This must be declared as global, otherwise it changes its value during the cycles

/* Flag used to store if an Gasboard ISR was executed*/
volatile bool gbGASDone;

volatile bool gbGASflag;


/* -----------------------  SFM  -----------------------  */

/* Declaration of the flags to check the callbacks are executed */
volatile bool gbSFMDone;
volatile bool gbSFMflag;

/* Flow measured from the SFM sensor */
float gfFlowSMF;


/* -----------------------  CO2  -----------------------  */
/* Declaration of the flags to check the callbacks are executed */
volatile bool gbCO2Done;
volatile bool gbCO2flag;

/* CO2 and TVOC measured from the CO2 sensor */
uint16_t gu16CO2;
uint16_t gu16TVOC;

bool test12c = false;


/* -----------------------  MPR  -----------------------  */
volatile bool gbMPR_OpMode;
volatile bool gbMPRDone;
uint8_t MPR_RX_buffer [MPR_DATA_BUFFER_SIZE];
float gfPressureMPR;
float gfTempMPR;

uint8_t u8RequestOpMode[MPR_OP_BUFFER_SIZE] = {0xAA, 0x00, 0x00};
/* Read the data from the sensor */
//uint8_t TX_Buffer_MPR[MPR_DATA_BUFFER_SIZE] = {0xFA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint8_t TX_Buffer_MPR[MPR_DATA_BUFFER_SIZE] = {0xF0, 0x00, 0x00, 0x00};



/* -----------------------  ADC  -----------------------  */
	/* Polynomial parameters from data fit to convert the raw ADC value to the actual current in Amperes*/
	const float fCurrentPol[2] = {0.00169404924302870, -0.0138943629841409};
	//const float fVoltagePol[2] = {0.00880332914534114, -0.273383180824596};

	/* Sum of the squared values of the current */
	float RMSCurrentAux = 0;

	/* -----------------------  I2C  -----------------------  */

	/* Variable used for the loop that initializes the I2C data buffer */
	uint16_t i;

	/* Sensitivity of the HDI sensor */
	uint64_t HDISensitivity;

	/* ---------------------  Gasboard  ---------------------  */

	/* Stores only the significant bytes of the read data */
	float fsigData[GAS_SD_BUFFER_SIZE];


	/* -----------------------  SFM  -----------------------  */
	/* Declare buffer used to store the received data */
	uint8_t	SFM_RX_buffer[SFM_RX_BUFFER_SIZE];

	/* -----------------------  CO2  -----------------------  */
	/* Declare buffer used to store the received data */
	uint8_t	CO2_RX_buffer[CO2_RX_BUFFER_SIZE];




	/* Allocate memory for the LPI2C driver state structure */
	lpi2c_master_state_t lpi2c1MasterState;


    // SPI communication variables
	       lpspi_state_t LPSPI_MPRState;


/* @brief: ADC Interrupt Service Routine.
 * 		  Toggle a pin, read the conversion result, store it
 * 		  into a variable and set a specified flag.
 */
void ADC_IRQHandler(void)
{
	/* Toggle the pin PTD7 each time it enters this routine */
	gbCocoFlag = !gbCocoFlag;
	PINS_DRV_WritePin(ADC_COCO_IO,ADC_COCO_PIN, gbCocoFlag);

	/* Get channel result from ADC channel */
	ADC_DRV_GetChanResult(ADC_INSTANCE, 0U, (uint16_t *)&gu16CurrentRawValue);

	/* Update the counter of the number of conversions done */
				gu16NrConvDone++;

				/* Process the readings to get the value in Amperes */
				gfCurrentValue = ((float) gu16CurrentRawValue)*fCurrentPol[0] + fCurrentPol[1];

				/* Compute the sum of the squared values of current needed to the RMS computation */
				RMSCurrentAux += gfCurrentValue*gfCurrentValue;

				/* After a predefined number of readings, compute the RMS */
				if (gu16NrConvDone == gu16RMSBuffer)
				{
					/* Toggle the pin to indicate the RMS computation was done */
					gbRMSCoCo = !gbRMSCoCo;
					PINS_DRV_WritePin(RMS_COCO_IO, RMS_COCO_PIN, gbRMSCoCo);

					/* Compute the current RMS value */
					gfRMSCurrent = (float) sqrt(RMSCurrentAux/gu16NrConvDone);

					/*Update the RMS index */
					gu16RMSIdx ++;

					/* Clear the squared sum u8I2CBufferHDI */
					RMSCurrentAux = 0;

					/* Clear the counter of the RMS */
					gu16NrConvDone = 0;
				}


	/* Set ADC conversion complete flag */
	gbADCConvDone = true;

}

/*!
 * @brief: LPIT interrupt handler.
 * 	       When an interrupt occurs clear channel flag and toggle LED0
 */
void LPIT_ISR_HDI(void)
{
	/* Clear LPIT channel flag */
//	LPIT_DRV_ClearInterruptFlagTimerChannels(INST_LPIT1, (1 << LPIT_CHANNEL_HDI));


	 /* Request data from the bus slave */
     LPI2C_DRV_MasterReceiveDataBlocking(INST_LPI2C1, u8I2CBufferHDI, I2C_BUFFER_SIZE, true, I2C_TIMEOUT);

	 /* Convert the counts to pressure in milibars*/
	 gu16PressureHDI = PressureHDI (u8I2CBufferHDI, HDISensitivity);

	/* Clear the buffer to prepare it for the next operation */
	for (i = 0u; i < I2C_BUFFER_SIZE; i++)
	{
		u8I2CBufferHDI[i] = 0u;
	}



}


void timing_pal_GAS_callBack(void * userData)
{
	(void)userData;

	 /* Receive Data from Gasboard */
				  LPUART_DRV_ReceiveData(INST_LPUART_GASBOARD, &GAS_RX_buffer, GAS_RX_BUFFER_SIZE);

				  /* Ignore bits without significant data and convert the others to float */
					for (uint8_t i = 0; i<GAS_SD_BUFFER_SIZE; i++)
					{
						fsigData[i] = (float)GAS_RX_buffer[i+4];
					}

					/* Compute the characteristics of the flow */
					gfO2concentration = (fsigData[0]*256 + fsigData[1])/10; //(Vol %)
					gfO2flow          = (fsigData[2]*256 + fsigData[3])/10; //(L/min)
					gfO2temperature   = (fsigData[4]*256 + fsigData[5])/10; //(C)

	/* Set Gasboard communication complete flag */
	gbGASDone = true;
	gbGASflag = !gbGASflag;
}

void timing_pal_SFM_callBack(void * userData)
{
	(void)userData;

	/* Define the I2C address for the corresponding sensor */
				 LPI2C_DRV_MasterSetSlaveAddr(INST_LPI2C1,SFM_ADDRESS, false);
				/* Receive Data from SFM */
				LPI2C_DRV_MasterReceiveData(INST_LPI2C1, SFM_RX_buffer,SFM_RX_BUFFER_SIZE, false);


				 /* Compute the flow from the received data */
				 gfFlowSMF = FlowSFM (SFM_RX_buffer);


	/* Set SFM communication complete flag */
	gbSFMDone = true;
	gbSFMflag = !gbSFMflag;
}

void timing_pal_CO2_callBack(void * userData)
{
	(void)userData;

	/* Define the I2C address for the corresponding sensor */
			//    LPI2C_DRV_MasterSetSlaveAddr(INST_LPI2C1,CO2_ADDRESS, false);
				/* Receive Data from SFM */
			//	LPI2C_DRV_MasterReceiveData(INST_LPI2C1, CO2_RX_buffer,CO2_RX_BUFFER_SIZE, false);

				gu16CO2  = ComputeCo2(CO2_RX_buffer);
				gu16TVOC = ComputeTVOC(CO2_RX_buffer);

	/* Set CO2 communication complete flag */
	gbCO2Done = true;
	gbCO2flag = !gbCO2flag;
}


void timing_pal_MPR_callBack(void * userData)
{
	(void)userData;


	 if (gbMPR_OpMode == true)
				  	{


				  	//	LPSPI_DRV_MasterTransferBlocking(LPSPI_MPR, TX_Buffer_MPR, MPR_RX_buffer, MPR_DATA_BUFFER_SIZE, SPI_TIMEOUT);

				  		LPSPI_DRV_MasterTransfer(LPSPI_MPR, TX_Buffer_MPR, MPR_RX_buffer, MPR_DATA_BUFFER_SIZE);

				  		gfPressureMPR =  ComputePressureMPR(MPR_RX_buffer);

				  		gbMPR_OpMode = false;

				  	}
				  	else
				  	{
				  		/* Request the sensor to leave Standby Mode and enter the Operation Mode */

				  		uint8_t u8DataDiscard[MPR_OP_BUFFER_SIZE] = {0x00, 0x00, 0x00}; /* Trash sent by the sensor */

				  		LPSPI_DRV_MasterTransfer(LPSPI_MPR, &u8RequestOpMode, &u8DataDiscard, MPR_OP_BUFFER_SIZE);

				  		/* Set CO2 communication complete flag */
				  				gbMPR_OpMode = true;

				  	//	LPSPI_DRV_MasterTransferBlocking(LPSPI_MPR, &u8RequestOpMode, &u8DataDiscard, MPR_OP_BUFFER_SIZE, SPI_TIMEOUT);


				  	}


	gbMPRDone = true;



}



//void noCallback (i2c_master_event_t masterEvent,void *userData) {}


/*!
 \brief The main function for the project.
 \details The startup initialization sequence is the following:
 * - startup asm routine
 * - main()
 */
int main(void)
{
	/* Write your local variable definition here */

	 HDISensitivity = SensitivyHDI ();


	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
#ifdef PEX_RTOS_INIT
	PEX_RTOS_INIT(); /* Initialization of the selected RTOS. Macro is defined by the RTOS component. */
#endif
	/*** End of Processor Expert internal initialization.                    ***/

	/* Initialize and configure clocks
	 * 	-	see clock manager component for details
	 */
	CLOCK_SYS_Init(g_clockManConfigsArr, CLOCK_MANAGER_CONFIG_CNT,
			g_clockManCallbacksArr, CLOCK_MANAGER_CALLBACK_CNT);
	CLOCK_SYS_UpdateConfiguration(0U, CLOCK_MANAGER_POLICY_AGREEMENT);


	/* Initialize pins */
	Init_pins();


	/*Initialize ADC Instance*/
	IRQn_Type adcIRQ = Init_ADC();

	/* The interrupt trigger is the ADC Coco flag, thus it enters the IRQ when the conversion is done*/
	INT_SYS_InstallHandler(adcIRQ, &ADC_IRQHandler, (isr_t*) 0);

	/* Enable ADC 1 interrupt */
	INT_SYS_EnableIRQ(adcIRQ);


	/* Initialize LPI2C Master configuration */
	LPI2C_DRV_MasterInit(INST_LPI2C1, &lpi2c1_MasterConfig0, &lpi2c1MasterState);  // This cannot go inside of
											// the Init.c function because the communication does not initialize there.

	/* Define the I2C address for the corresponding sensor */
		// LPI2C_DRV_MasterSetSlaveAddr(INST_LPI2C1,SFM_ADDRESS, false);

	 int delay = 100;
	// while (delay--);


	    	/* Initialize LPSPI0 */

LPSPI_DRV_MasterInit(LPSPI_MPR,&LPSPI_MPRState,&LPSPI_MPR_MasterConfig);

//	while (delay--);

		// if (!LPI2C_DRV_MasterGetTransferStatus(INST_LPI2C1,SFM_TX_BUFFER_SIZE))
		// {
		//	 test12c = false;
		// }

		// test12c = true;
	//	 while (delay--);

		    /* Define the I2C address for the corresponding sensor */
	//	    LPI2C_DRV_MasterSetSlaveAddr(INST_LPI2C1,CO2_ADDRESS, false);
		   	 /* Request Data from the SFM flow sensor */

	//	 	while (delay--);

	//	  	 uint8_t u8_TX_CO2 [CO2_TX_BUFFER_SIZE] = {0xB5};
	//	 	 LPI2C_DRV_MasterSendData(INST_LPI2C1, u8_TX_CO2,CO2_TX_BUFFER_SIZE, true);



		 	/*Initialize PDB Instance*/
		 	Init_PDB();

		 	/* Initialize Timing PAL peripheral */
//		 	Init_PAL();

		 	/*Initialize Gasboard LPUART and Timing PAL Instances*/
		 	Init_GAS();


	/* Initialize SFM related peripheral */
//    Init_SFM();






    /* Initialize MPR related peripheral */
//    Init_MPR();


	/* Initialize CO2 related peripheral */
   // Init_CO2();


	 uint8_t u8_TX_SFM [SFM_TX_BUFFER_SIZE] = {0x10, 0x00};

//	LPI2C_DRV_MasterSendData(INST_LPI2C1, u8_TX_SFM,SFM_TX_BUFFER_SIZE, true);

	/* Power mode configuration for RUN mode */
//	POWER_SYS_Init(&powerConfigsArr, 0, &powerStaticCallbacksConfigsArr,0);


    /* Start counters*/

    /* Trigger PDB counter to perform the ADC conversions */
	PDB_DRV_SoftTriggerCmd(PDB_INSTANCE);



	/* Infinite loop
	 * 	-	Wait for ADC conversion complete interrupt,
	 * 		then:
	 * 			 compute the actual current value,
	 * 			 calculate the RMS value after an predetermined number of measurements,
	 * 			 toggle the pin referent to a new RMS conversion,
	 * 			 trigger the PDB timer.
	 */


	while (true)
	{
	} // while (true)



	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
  /*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
  #ifdef PEX_RTOS_START
    PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
  #endif
  /*** End of RTOS startup code.  ***/
  /*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
  for(;;) {
    if(exit_code != 0) {
      break;
    }
  }
  return exit_code;
  /*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.1 [05.21]
 **     for the Freescale S32K series of microcontrollers.
 **
 ** ###################################################################
 */
