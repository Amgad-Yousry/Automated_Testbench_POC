/*!
    @page flexio_uart_s32k144_group FLEXIO UART
    @brief Example application showing FlexIO UART driver usage

    ## Application description ##
    _____
    The purpose of this demo application is to show you the usage of the FlexIO UART driver found
    on the S32K144 SoC using S32 SDK API.

    Two instances of the FlexIO UART driver are used to echo the data received from host.

    ## Prerequisites ##
    _____
    The run the example you will need to have the following items:
    - 1 S32K144 board
    - 1 Power Adapter 12V (if the board can't be powered from the USB)
    - 2 Dupont male to male cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)
    - UART to USB converter if it is not included on the target board. (Please consult your boards documentation to check if UART-USB converter is present).

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - S32K144EVB-Q100
    - S32K144-MB

    ## Hardware Wiring ##
    _____
    The following connections must be done to for this example application to work:

    PIN FUNCTION    |	S32K144EVB-Q100	        |	S32K144-MB
    ----------------|---------------|--------------
    FLEXIO_UART RX 	(\b PTA11)    |J1.2 - J4.4	 |	J9.22 - J20.5
    FLEXIO_UART TX	(\b PTA0)     |J5.7 - J4.2  |	J9.31 - J20.2

    @note The application uses on board USB - UART chips to transfer data from board to host PC

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b flexio_uart_s32k144. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b flexio_uart_s32k144). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Debugging the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b flexio_uart_s32k144 \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b flexio_uart_s32k144 \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b flexio_uart_s32k144 \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b flexio_uart_s32k144 \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

    ## Notes ##
    ______
    For this example it is necessary to open a terminal emulator and configure it with:
    -   115200 baud
    -   One stop bit
    -   No parity
    -   No flow control

*/

