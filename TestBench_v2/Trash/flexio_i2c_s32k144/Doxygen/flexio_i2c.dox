/*!
    @page flexio_i2c_s32k144_group FLEXIO I2C
    @brief Example application showing FlexIO I2C driver usage

    ## Application description ##
    _____
    The purpose of this demo application is to show you the usage of the FlexIO I2C driver found
    on the S32K144 SoC using S32 SDK API.

    The application uses FlexIO I2C driver to make a send and a receive data request. The slave device for this example is the LPI2C instance, which is configured to act as a bus slave.
    The slave and master buffers will be checked after each transfer by the application, user shall check \b isTransferOk variable to see if the transmissions are successful.

    ## Prerequisites ##
    _____
    The run the example you will need to have the following items:
    - 1 S32K144 board
    - 1 Power Adapter 12V (if the board can't be powered from the USB)
    - 2 Dupont male to male cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)

    ## Boards supported ##
    _____
    The following boards are supported by this application:
    - S32K144EVB-Q100
    - S32K144-MB

    ## Hardware Wiring ##
    _____
    The following connections must be done to for this example application to work:

    PIN FUNCTION    |	S32K144EVB-Q100	        |	S32K144-MB
    ----------------|---------------|--------------
    FLEXIO SDA	(\b PTD0)    |J1.1 - J6.1	|	J9.29 - J12.31
    FLEXIO SCL	(\b PTA11)    |J1.3 - J1.2   |	J9.30 - J9.22
    LPI2C SDA	(\b PTA2)    |J1.1 - J6.1  |	J9.29 - J12.31
    LPI2C SCL	(\b PTA3)    |J1.3 - J1.2  |	J9.30 - J9.22

    ## How to run ##
    _____
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b flexio_i2c_s32k144. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b flexio_i2c_s32k144). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Debugging the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b flexio_i2c_s32k144 \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b flexio_i2c_s32k144 \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b flexio_i2c_s32k144 \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b flexio_i2c_s32k144 \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

*/

