=============================================================================
List of generated methods in project: TestBench_v2

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetMuxModeSel -This function configures the pin muxing
   - pin_mux_PINS_DRV_SetPinIntSel -This function configures the port pin interrupt/DMA request
   - pin_mux_PINS_DRV_GetPinIntSel -This function gets the current port pin interrupt/DMA request configuration
   - pin_mux_PINS_DRV_ClearPinIntFlagCmd -This function clears the individual pin-interrupt status flag
   - pin_mux_PINS_DRV_EnableDigitalFilter -This function enables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_DisableDigitalFilter -This function disables digital filter feature for digital pin muxing
   - pin_mux_PINS_DRV_ConfigDigitalFilter -This function configures digital filter for port with given configuration
   - pin_mux_PINS_DRV_GetPortIntFlag -This function reads the entire port interrupt status flag
   - pin_mux_PINS_DRV_ClearPortIntFlagCmd -This function clears the entire port interrupt status flag
   - pin_mux_PINS_DRV_SetGlobalPinControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same pin configuration
   - pin_mux_PINS_DRV_SetGlobalIntControl -This function quickly configures multiple pins within the one port for the same 
                peripheral function with the same interrupt configuration
   - pin_mux_PINS_DRV_GetPinsDirection -This function returns the current pins directions for a port. Pins corresponding to 
                bits with value of '1' are configured as output and pins corresponding to bits with value of '0' are configured 
                as input.
   - pin_mux_PINS_DRV_SetPinDirection -This function configures the direction for the given pin, with the given value('1' for 
                pin to be configured as output and '0' for pin to be configured as input)
   - pin_mux_PINS_DRV_SetPinsDirection -This function sets the direction configuration for all pins in a port. Pins 
                corresponding to bits with value of '1' will be configured as output and pins corresponding to bits with value 
                of '0' will be configured as input.
   - pin_mux_PINS_DRV_SetPortInputDisable -This function sets the pins input state for a port. Pins corresponding to bits with 
                value of '1' will not be configured as input and pins corresponding to bits with value of '0' will be 
                configured as input
   - pin_mux_PINS_DRV_GetPortInputDisable -This function returns the current pins input state for a port. Pins corresponding to 
                bits with value of '1' are not configured as input and pins corresponding to bits with value of '0' are 
                configured as input
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency
   - clockMan1_CLOCK_DRV_EnablePeripheralClock -Enables peripheral clock
   - clockMan1_CLOCK_DRV_DisablePeripheralClock -Disables peripheral clock
   - clockMan1_CLOCK_DRV_SetSystemClock -Configures the system clocks
   - clockMan1_CLOCK_DRV_GetSystemClockSource -Gets the system clock source
   - clockMan1_CLOCK_DRV_SetIrc -Enable or disable SIRC clock source.
   - clockMan1_CLOCK_DRV_SetXosc -Enable or disable SOSC clock source
   - clockMan1_CLOCK_DRV_SetPll -Enable or disable SPLL clock source
   - clockMan1_CLOCK_DRV_SetLpo -Enable or disable LPO clock source

Module "lpuart_gasboard" (component lpuart)
   - lpuart_gasboard_LPUART_DRV_Init -Initializes an LPUART operation instance.
   - lpuart_gasboard_LPUART_DRV_Deinit -Shuts down the LPUART by disabling interrupts and transmitter/receiver.
   - lpuart_gasboard_LPUART_DRV_InstallRxCallback -Installs callback function for the LPUART receive.
   - lpuart_gasboard_LPUART_DRV_InstallTxCallback -Installs callback function for the LPUART transmit.
   - lpuart_gasboard_LPUART_DRV_SendDataBlocking -Sends data out through the LPUART module using a blocking method.
   - lpuart_gasboard_LPUART_DRV_SendDataPolling -Send out multiple bytes of data using polling method.
   - lpuart_gasboard_LPUART_DRV_SendData -Sends data out through the LPUART module using a non-blocking method. This enables an 
                a-sync method for transmitting data. When used with a non-blocking receive, the LPUART can perform a full 
                duplex operation. Non-blocking means that the function returns immediately. The application has to get the 
                transmit status to know when the transmit is complete.
   - lpuart_gasboard_LPUART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - lpuart_gasboard_LPUART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - lpuart_gasboard_LPUART_DRV_ReceiveDataBlocking -Gets data from the LPUART module by using a blocking method. Blocking 
                means that the function does not return until the receive is complete.
   - lpuart_gasboard_LPUART_DRV_ReceiveDataPolling -Receive multiple bytes of data using polling method.
   - lpuart_gasboard_LPUART_DRV_ReceiveData -Gets data from the LPUART module by using a non-blocking method. This enables an 
                a-sync method for receiving data. When used with a non-blocking transmission, the LPUART can perform a full 
                duplex operation. Non-blocking means that the function returns immediately. The application has to get the 
                receive status to know when the receive is complete.
   - lpuart_gasboard_LPUART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - lpuart_gasboard_LPUART_DRV_AbortReceivingData -Terminates a non-blocking receive early.
   - lpuart_gasboard_LPUART_DRV_SetBaudRate -Configures the LPUART baud rate.
   - lpuart_gasboard_LPUART_DRV_GetBaudRate -Returns the LPUART baud rate.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequest -Configures the DMA request for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the channel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA channel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the channel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the channel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current channel.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "adConv1"   (component adc)
   - adConv1_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adConv1_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adConv1_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adConv1_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adConv1_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adConv1_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adConv1_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adConv1_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adConv1_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adConv1_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adConv1_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adConv1_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adConv1_ADC_DRV_SetSwPretrigger -This function sets the software pretrigger - affects only first 4 control channels.
   - adConv1_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adConv1_ADC_DRV_GetConvCompleteFlag -Gets the control channel Conversion Complete Flag state
   - adConv1_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adConv1_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adConv1_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adConv1_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adConv1_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adConv1_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adConv1_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adConv1_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adConv1_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "lpTmr1"    (component lptmr)
   - lpTmr1_LPTMR_DRV_InitConfigStruct -Initialize configuration structure.
   - lpTmr1_LPTMR_DRV_Init -Initializes the LPTMR as Timer or Pulse Counter
   - lpTmr1_LPTMR_DRV_SetConfig -Configure a LPTMR instance.
   - lpTmr1_LPTMR_DRV_GetConfig -Get the current configuration of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_Deinit -Deinitializes a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetCompareValueByCount -Change the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_GetCompareValueByCount -Get the Compare Value in counter tick units.
   - lpTmr1_LPTMR_DRV_SetCompareValueByUs -Set the compare value for Timer Mode in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareValueByUs -Get the Compare Value in microseconds.
   - lpTmr1_LPTMR_DRV_GetCompareFlag -Get the current state of the Compare Flag (Interrupt Pending)
   - lpTmr1_LPTMR_DRV_ClearCompareFlag -Clear the Compare/Interrupt Pending Flag.
   - lpTmr1_LPTMR_DRV_IsRunning -Get the run state of a LPTMR instance.
   - lpTmr1_LPTMR_DRV_SetInterrupt -Enable/disable the LPTMR interrupt
   - lpTmr1_LPTMR_DRV_GetCounterValueByCount -Get the current counter value in counter tick units.
   - lpTmr1_LPTMR_DRV_StartCounter -Enable the LPTMR / Start the counter.
   - lpTmr1_LPTMR_DRV_StopCounter -Disable the LPTMR / Stop the counter.
   - lpTmr1_LPTMR_DRV_SetPinConfiguration -Set the Input Pin configuration for Pulse Counter mode.

Module "adConv2"   (component adc)
   - adConv2_ADC_DRV_InitConverterStruct -Initializes the converter configuration structure.
   - adConv2_ADC_DRV_ConfigConverter -Configures the converter with the given configuration structure.
   - adConv2_ADC_DRV_GetConverterConfig -Gets the current converter configuration.
   - adConv2_ADC_DRV_Reset -Resets the converter (sets all configurations to reset values)
   - adConv2_ADC_DRV_InitHwCompareStruct -Initializes the Hardware Compare configuration structure.
   - adConv2_ADC_DRV_ConfigHwCompare -Configures the Hardware Compare feature with the given configuration structure.
   - adConv2_ADC_DRV_GetHwCompareConfig -Gets the current Hardware Compare configuration.
   - adConv2_ADC_DRV_InitHwAverageStruct -Initializes the Hardware Average configuration structure.
   - adConv2_ADC_DRV_ConfigHwAverage -Configures the Hardware Average feature with the given configuration structure.
   - adConv2_ADC_DRV_GetHwAverageConfig -Gets the current Hardware Average configuration.
   - adConv2_ADC_DRV_InitChanStruct -Initializes the control channel configuration structure
   - adConv2_ADC_DRV_ConfigChan -Configures the selected control channel with the given configuration structure
   - adConv2_ADC_DRV_GetChanConfig -Gets the current control channel configuration for the selected channel index
   - adConv2_ADC_DRV_SetSwPretrigger -This function sets the software pretrigger - affects only first 4 control channels.
   - adConv2_ADC_DRV_WaitConvDone -Waits for a conversion/calibration to finish.
   - adConv2_ADC_DRV_GetConvCompleteFlag -Gets the control channel Conversion Complete Flag state
   - adConv2_ADC_DRV_GetChanResult -Gets the last result for the selected control channel
   - adConv2_ADC_DRV_AutoCalibration -Executes an Auto-Calibration.
   - adConv2_ADC_DRV_InitUserCalibrationStruct -Initializes the User Calibration configuration structure.
   - adConv2_ADC_DRV_ConfigUserCalibration -Configures the User Calibration feature with the given configuration structure.
   - adConv2_ADC_DRV_GetUserCalibration -Gets the current User Calibration configuration.
   - adConv2_ADC_DRV_GetInterruptNumber -Returns the interrupt number for the ADC instance.
   - adConv2_ADC_DRV_ClearLatchedTriggers -Clear latched triggers under processing.
   - adConv2_ADC_DRV_ClearTriggerErrors -Clear all latch trigger error.
   - adConv2_ADC_DRV_GetTriggerErrorFlags -This function returns the trigger error flags bits of the ADC instance.

Module "lpuart2"   (component lpuart)
   - lpuart2_LPUART_DRV_Init -Initializes an LPUART operation instance.
   - lpuart2_LPUART_DRV_Deinit -Shuts down the LPUART by disabling interrupts and transmitter/receiver.
   - lpuart2_LPUART_DRV_InstallRxCallback -Installs callback function for the LPUART receive.
   - lpuart2_LPUART_DRV_InstallTxCallback -Installs callback function for the LPUART transmit.
   - lpuart2_LPUART_DRV_SendDataBlocking -Sends data out through the LPUART module using a blocking method.
   - lpuart2_LPUART_DRV_SendDataPolling -Send out multiple bytes of data using polling method.
   - lpuart2_LPUART_DRV_SendData -Sends data out through the LPUART module using a non-blocking method. This enables an a-sync 
                method for transmitting data. When used with a non-blocking receive, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the transmit 
                status to know when the transmit is complete.
   - lpuart2_LPUART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - lpuart2_LPUART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - lpuart2_LPUART_DRV_ReceiveDataBlocking -Gets data from the LPUART module by using a blocking method. Blocking means that 
                the function does not return until the receive is complete.
   - lpuart2_LPUART_DRV_ReceiveDataPolling -Receive multiple bytes of data using polling method.
   - lpuart2_LPUART_DRV_ReceiveData -Gets data from the LPUART module by using a non-blocking method. This enables an a-sync 
                method for receiving data. When used with a non-blocking transmission, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the receive 
                status to know when the receive is complete.
   - lpuart2_LPUART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - lpuart2_LPUART_DRV_AbortReceivingData -Terminates a non-blocking receive early.
   - lpuart2_LPUART_DRV_SetBaudRate -Configures the LPUART baud rate.
   - lpuart2_LPUART_DRV_GetBaudRate -Returns the LPUART baud rate.

Module "pdly1"     (component pdb)
   - pdly1_PDB_DRV_Init -Initializes the PDB counter and triggers input
   - pdly1_PDB_DRV_Deinit -De-initializes the PDB module
   - pdly1_PDB_DRV_GetDefaultConfig -Gets the default configuration structure of PDB with default settings
   - pdly1_PDB_DRV_Enable -Enables the PDB module
   - pdly1_PDB_DRV_Disable -Disables the PDB module
   - pdly1_PDB_DRV_SoftTriggerCmd -Triggers the PDB with a software trigger
   - pdly1_PDB_DRV_GetTimerValue -Gets the current counter value in the PDB module
   - pdly1_PDB_DRV_GetTimerIntFlag -Gets the PDB interrupt flag
   - pdly1_PDB_DRV_ClearTimerIntFlag -Clears the interrupt flag
   - pdly1_PDB_DRV_LoadValuesCmd -Executes the command of loading values
   - pdly1_PDB_DRV_SetTimerModulusValue -Sets the value of timer modulus
   - pdly1_PDB_DRV_SetValueForTimerInterrupt -Sets the value for the timer interrupt
   - pdly1_PDB_DRV_ConfigAdcPreTrigger -Configures the ADC pre_trigger in the PDB module
   - pdly1_PDB_DRV_GetAdcPreTriggerFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_ClearAdcPreTriggerFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_GetAdcPreTriggerSeqErrFlags -Gets the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_ClearAdcPreTriggerSeqErrFlags -Clears the ADC pre_trigger flag in the PDB module
   - pdly1_PDB_DRV_SetAdcPreTriggerDelayValue -Sets the ADC pre_trigger delay value in the PDB module
   - pdly1_PDB_DRV_SetCmpPulseOutEnable -Switches on/off the CMP pulse out in the PDB module
   - pdly1_PDB_DRV_SetCmpPulseOutDelayForHigh -Sets the CMP pulse out delay value for high in the PDB module
   - pdly1_PDB_DRV_SetCmpPulseOutDelayForLow -Sets the CMP pulse out delay value for low in the PDB module

Module "pwrMan1"   (component power_manager)
   - pwrMan1_POWER_SYS_Init -Power manager initialization for operation.
   - pwrMan1_POWER_SYS_Deinit -This function deinitializes the Power manager.
   - pwrMan1_POWER_SYS_SetMode -This function configures the power mode.
   - pwrMan1_POWER_SYS_GetLastMode -This function returns the last successfully set power mode.
   - pwrMan1_POWER_SYS_GetLastModeConfig -This function returns the user configuration structure of the last successfully set 
                power mode.
   - pwrMan1_POWER_SYS_GetCurrentMode -This function returns currently running power mode.
   - pwrMan1_POWER_SYS_GetErrorCallbackIndex -This function returns the last failed notification callback.
   - pwrMan1_POWER_SYS_GetErrorCallback -This function returns the callback configuration structure for the last failed 
                notification.

Module "lpi2c1"    (component lpi2c)
   - lpi2c1_LPI2C_DRV_MasterInit -Initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterDeinit -De-initialize the LPI2C master mode driver.
   - lpi2c1_LPI2C_DRV_MasterGetBaudRate -Get the currently configured baud rate.
   - lpi2c1_LPI2C_DRV_MasterSetBaudRate -Set the baud rate for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSetSlaveAddr -Set the slave address for any subsequent I2C communication.
   - lpi2c1_LPI2C_DRV_MasterSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_MasterReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_MasterGetTransferStatus -Return the current status of the I2C master transfer.
   - lpi2c1_LPI2C_DRV_MasterIRQHandler -Handle master operation when I2C interrupt occurs.
   - lpi2c1_LPI2C_DRV_SlaveInit -Initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveDeinit -De-initialize the I2C slave mode driver.
   - lpi2c1_LPI2C_DRV_SlaveSetTxBuffer -Provide a buffer for transmitting data.
   - lpi2c1_LPI2C_DRV_SlaveSetRxBuffer -Provide a buffer for receiving data.
   - lpi2c1_LPI2C_DRV_SlaveSendData -Perform a non-blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveSendDataBlocking -Perform a blocking send transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveData -Perform a non-blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveReceiveDataBlocking -Perform a blocking receive transaction on the I2C bus.
   - lpi2c1_LPI2C_DRV_SlaveGetTransferStatus -Return the current status of the I2C slave transfer.
   - lpi2c1_LPI2C_DRV_SlaveAbortTransferData -Abort a non-blocking I2C Master transmission or reception.
   - lpi2c1_LPI2C_DRV_SlaveIRQHandler -Handle slave operation when I2C interrupt occurs.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "timing_pal1" (component timing_pal)
   - timing_pal1_TIMING_Init -Initialize the timer instance and timer channels with value from input configuration structure
   - timing_pal1_TIMING_Deinit -De-initialize a timer instance
   - timing_pal1_TIMING_StartChannel -Starts the timer channel counting
   - timing_pal1_TIMING_StopChannel -Stop the timer channel counting
   - timing_pal1_TIMING_GetElapsed -Get elapsed ticks
   - timing_pal1_TIMING_GetRemaining -Get remaining ticks
   - timing_pal1_TIMING_EnableNotification -Enable channel notifications
   - timing_pal1_TIMING_DisableNotification -Disable channel notifications
   - timing_pal1_TIMING_GetResolution -Get tick resolution
   - timing_pal1_TIMING_GetMaxPeriod -Get max period in engineering units

Module "LPSPI_MPR" (component lpspi)
   - LPSPI_MPR_LPSPI_DRV_MasterInit -Initializes a LPSPI instance for interrupt driven master mode operation.
   - LPSPI_MPR_LPSPI_DRV_MasterDeinit -Shuts down a LPSPI instance.
   - LPSPI_MPR_LPSPI_DRV_MasterSetDelay -Configures the LPSPI master mode bus timing delay options.
   - LPSPI_MPR_LPSPI_DRV_MasterConfigureBus -Configures the LPSPI port physical parameters to access a device on the bus when 
                the LSPI instance is configured for interrupt operation.
   - LPSPI_MPR_LPSPI_DRV_MasterTransferBlocking -Performs an interrupt driven blocking SPI master mode transfer.
   - LPSPI_MPR_LPSPI_DRV_MasterTransfer -Performs an interrupt driven non-blocking SPI master mode transfer.
   - LPSPI_MPR_LPSPI_DRV_MasterGetTransferStatus -Returns whether the previous interrupt driven transfer is completed.
   - LPSPI_MPR_LPSPI_DRV_MasterAbortTransfer -Terminates an interrupt driven asynchronous transfer early.
   - LPSPI_MPR_LPSPI_DRV_SlaveInit -Initializes a LPSPI instance for a slave mode operation, using interrupt mechanism.
   - LPSPI_MPR_LPSPI_DRV_SlaveDeinit -Shuts down an LPSPI instance interrupt mechanism.
   - LPSPI_MPR_LPSPI_DRV_SlaveTransferBlocking -Transfers data on LPSPI bus using interrupt and a blocking call.
   - LPSPI_MPR_LPSPI_DRV_SlaveTransfer -Starts the transfer data on LPSPI bus using an interrupt and a non-blocking call.
   - LPSPI_MPR_LPSPI_DRV_SlaveAbortTransfer -Aborts the transfer that started by a non-blocking call transfer function.
   - LPSPI_MPR_LPSPI_DRV_SlaveGetTransferStatus -Returns whether the previous transfer is finished.

Module "Cpu"       (component S32K144_100)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
