/*!
    @page freemaster_s32k144_group FreeMASTER
    @brief Example application showing FreeMASTER Serial Communication usage

    ## Application description ##
    ______
    The purpose of this demo application is to show you
    how to use the FreeMASTER serial communication using S32K144 on
    OpenSDA with this SDK.

    This demo uses the FreeMASTER Run-Time Debugging Tool to visualise ADC
    conversions and allows the user to monitor the ADC sampling rate for
    different ADC configurations (ADC sampling time and resolution can be
    controlled through FreeMASTER Application Commands).

    The ADC is configured to perform continous conversions and generate
    an interrupt after each conversion. The LPTMR is configured to generate
    a periodic interrupt at 10 ms which reads the number of ADC conversions.

    ## Prerequisites ##
    ______
    The run the example you will need to have the following items:
    - 1 S32K144 board
    - 1 Power Adapter 12V
    - 1 Dupont male to male cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)
    - FreeMASTER host application

    ## Boards supported ##
    ______
    The following boards are supported by this application:
    - S32K144EVB-Q100
    - S32K144-MB

    ## Hardware Wiring ##
    ______
    The following connections must be done to for this example application to work:

    PIN FUNCTION    |	S32K144EVB-Q100	        |	S32K144-MB
    ----------------|---------------|--------------
    LPUART1 TX (\b PTC7)	    | UART_TX - wired on the board 	|	J11.26 - J20.2
    LPUART1 RX (\b PTC6)   | UART_RX - wired on the board  |	J11.25 - J20.5
    ADC0 Input 12 (\b PTC14)       | POT - wired on the board         |   J21.1 - J11.18

    ## How to run ##
    ______
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b freemaster_s32k144. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b freemaster_s32k144). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png).
    Wait for the build action to be completed before continuing to the next step.
    #### 4. Running the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b freemaster_s32k144 \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b freemaster_s32k144 \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b freemaster_s32k144 \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers
     \b freemaster_s32k144 \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.

	- Open the FreeMASTER project and set the communication parameters:
	Go to Project/Options/Comm, choose Direct RS232 and set the port and
	speed.
	- Go to Project/Options/MAP Files and select the *.elf file of
	your project and set file format to ELF/DWARF.

    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.

    ## Notes ##
    ______
    FreeMASTER host application can be downloaded from NXP's website.
    FreeMASTER Serial Communication is included into the project (V2.0).
*/

